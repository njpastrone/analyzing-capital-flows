---
title: "Analyzing Data by Currency Regime"
format: html
editor: visual
---

#### Exchange Rate Regime and Net Flows data

### Load libraries

```{r, message=F}
library(tidyverse)
library(readr)
library(stringr)
options(scipen = 999)
```

### IMF Data

##### Loading

```{r}
net_flows_data_USD <- read_csv("Clean/net_flows_data_USD.csv")
```

```{r}
net_flows_data_USD |> head()
```

##### Add Grouping for Analyzed Countries

```{r}
eurozone_countries <- c("Portugal","Ireland","Finland","Netherlands, The",
                        "Belgium","Italy","Spain","Austria","France")
soe_countries <- c("Brunei Darussalam","Bahamas, The","Bermuda","Seychelles",
                   "Aruba, Kingdom of the Netherlands","Mauritius","Malta")
baltics_countries <- c("Estonia, Republic of","Latvia, Republic of","Lithuania, Republic of")
iceland <- "Iceland"
```

```{r}
net_flows_data_USD |> 
  mutate(
    country_group = as.factor(case_when(
      COUNTRY %in% eurozone_countries ~ "Eurozone",
      COUNTRY %in% soe_countries ~ "SOE",
      COUNTRY %in% baltics_countries ~ "Baltics",
      COUNTRY %in% iceland ~ "Iceland",
      TRUE ~ "Other"
    ))
  ) -> net_flows_data_USD
```


##### GDP Standardization and Cleaning

```{r}
gdp_data_USD <- read_csv("Clean/gdp_data_USD.csv")
```

```{r}
gdp_data_USD |> 
  head()
```

##### Note: Portfolio Flows may be disaggregated later, but this would involve another pull from the database.

```{r}
net_flows_data_USD |> 
  left_join(gdp_data_USD, by = c("COUNTRY", "YEAR" = "TIME_PERIOD")) |> 
  mutate(net_capital_flows_usd = `Net (net acquisition of financial assets less net incurrence of liabilities) - Direct investment, Total financial assets/liabilities` + `Net (net acquisition of financial assets less net incurrence of liabilities) - Portfolio investment, Total financial assets/liabilities` + `Net (net acquisition of financial assets less net incurrence of liabilities) - Other investment, Total financial assets/liabilities`) |> 
  rename(
    net_direct_investment_usd = `Net (net acquisition of financial assets less net incurrence of liabilities) - Direct investment, Total financial assets/liabilities`,
    net_portfolio_investment_usd = `Net (net acquisition of financial assets less net incurrence of liabilities) - Portfolio investment, Total financial assets/liabilities`,
    net_other_investment_usd = `Net (net acquisition of financial assets less net incurrence of liabilities) - Other investment, Total financial assets/liabilities`
  ) |> 
  select(COUNTRY, YEAR, QUARTER, `Gross domestic product (GDP), Current prices, US dollar`, net_capital_flows_usd, net_direct_investment_usd, net_portfolio_investment_usd, net_other_investment_usd, country_group) |> mutate(
    net_flows_pgdp = (net_capital_flows_usd * 4 / `Gross domestic product (GDP), Current prices, US dollar`)*100,
    ndi_pgdp = (net_direct_investment_usd * 4 / `Gross domestic product (GDP), Current prices, US dollar`)*100,
    npi_pgdp = (net_portfolio_investment_usd * 4 / `Gross domestic product (GDP), Current prices, US dollar`)*100,
    noi_pgdp = (net_other_investment_usd * 4 / `Gross domestic product (GDP), Current prices, US dollar`)*100
    ) |> 
  select(-net_capital_flows_usd, -net_direct_investment_usd, -net_portfolio_investment_usd, -net_other_investment_usd, -`Gross domestic product (GDP), Current prices, US dollar`) -> clean_net_flows_pgdp
```

```{r}
clean_net_flows_pgdp |> head()
```

### Exchange Rate Regime Data

```{r}
cleaned_exchange_rate_regime_indicator <- read_csv("Other Data (Not IMF)/exchange_rate_regime/cleaned_exchange_rate_regime_indicator.csv")
```

```{r}
cleaned_exchange_rate_regime_indicator |> 
  head()
```

##### Pivot

```{r}
pivot_exchange_regime <- function(df) {
  # columns that should stay wide identifiers
  id_cols <- c("year", "month")
  missing_ids <- setdiff(id_cols, names(df))
  if (length(missing_ids) > 0) {
    stop("Missing required id columns: ", paste(missing_ids, collapse = ", "))
  }

  # columns to pivot (everything except year/month)
  value_cols <- setdiff(names(df), id_cols)
  if (length(value_cols) == 0) {
    stop("No columns to pivot: dataframe only contains ", paste(id_cols, collapse = ", "))
  }

  # standardize types before pivot (prevents <double> vs <character> combine errors)
  df <- df %>%
    dplyr::mutate(dplyr::across(dplyr::all_of(value_cols), as.character))

  # detect whether pivot_longer has the id_cols argument on your tidyr
  has_id_cols <- "id_cols" %in% names(formals(tidyr::pivot_longer))

  long <- if (has_id_cols) {
    tidyr::pivot_longer(
      df,
      id_cols  = dplyr::all_of(id_cols),
      names_to = "COUNTRY",
      values_to = "currency_regime_type"
    )
  } else {
    tidyr::pivot_longer(
      df,
      cols     = dplyr::all_of(value_cols),
      names_to = "COUNTRY",
      values_to = "currency_regime_type"
    )
  }

  long %>%
    dplyr::mutate(currency_regime_type = factor(currency_regime_type))
}
```

```{r}
# usage
long_regimes <- pivot_exchange_regime(cleaned_exchange_rate_regime_indicator)
```

##### Adjust monthly data to quarterly

```{r}
library(dplyr)
library(stringr)

# helper: dominant (mode) with tie->NA
mode_dominant <- function(x) {
  x <- x[!is.na(x)]
  if (length(x) == 0) return(NA_character_)
  tab <- sort(table(x), decreasing = TRUE)
  if (length(tab) > 1 && tab[1] == tab[2]) return(NA_character_)  # tie -> NA
  names(tab)[1]
}

# convert monthly to quarterly by dominant regime
to_quarterly_regime <- function(df) {
  # remember original factor levels (if any) so we can restore
  orig_levels <- if (is.factor(df$currency_regime_type)) levels(df$currency_regime_type) else NULL

  df %>%
    mutate(
      quarter = ceiling(month / 3)  # 1..4
    ) %>%
    group_by(COUNTRY, year, quarter) %>%
    summarise(
      currency_regime_type = mode_dominant(as.character(currency_regime_type)),
      .groups = "drop"
    ) %>%
    mutate(
      currency_regime_type = if (!is.null(orig_levels))
        factor(currency_regime_type, levels = orig_levels)
      else
        factor(currency_regime_type)
    )
}
```

```{r}
quarterly_regimes <- to_quarterly_regime(long_regimes)
```

```{r}
quarterly_regimes |> head()
```

##### Add regime labels

```{r}
add_regime_labels <- function(df) {
  df %>%
    mutate(
      # make a numeric code safely from factor/char/int
      regime_code = suppressWarnings(as.integer(as.character(currency_regime_type))),
      regime_simple = case_when(
        regime_code == 1 ~ "Hard peg / narrow band / no separate tender",
        regime_code == 2 ~ "Crawling peg/band (tight, ≤±2%)",
        regime_code == 3 ~ "Crawling band (wider) / managed float",
        regime_code == 4 ~ "Freely floating",
        regime_code == 5 ~ "Freely falling",
        regime_code == 6 ~ "Dual market (parallel data missing)",
        TRUE ~ NA_character_
      ),
      regime_simple = factor(
        regime_simple,
        levels = c(
          "Hard peg / narrow band / no separate tender",
          "Crawling peg/band (tight, ≤±2%)",
          "Crawling band (wider) / managed float",
          "Freely floating",
          "Freely falling",
          "Dual market (parallel data missing)"
        ),
        ordered = TRUE
      )
    ) %>%
    select(-regime_code)
}
```

```{r}
quarterly_regimes |>
  add_regime_labels() -> quarterly_regimes_labeled
```

### Join Country Columns by ISO3c Codes

```{r}
library(dplyr)
library(stringr)
library(countrycode)

normalize_country <- function(x) {
  x |>
    str_squish() |>
    str_replace_all("[[:punct:]]", "") |>
    str_to_title()
}

```

```{r}
clean_net_flows_pgdp |>
  mutate(country_clean = normalize_country(COUNTRY),
         iso3c = countrycode(country_clean, origin = "country.name", destination =
                               "iso3c")) |> 
  drop_na() -> clean_net_flows_iso
```
###### Note: Unmatched countries deemed insignificant to analysis

```{r}
quarterly_regimes_labeled |>
  rename(YEAR = year, QUARTER = quarter) |> 
  mutate(country_clean = normalize_country(COUNTRY),
         iso3c = countrycode(country_clean, origin = "country.name", destination = "iso3c")) |> 
  drop_na() -> clean_regimes_iso
```
### Join data

```{r}
clean_net_flows_iso |> 
  inner_join(clean_regimes_iso, by = c("iso3c", "YEAR", "QUARTER")) |> 
  select(!c("country_clean.x", "COUNTRY.y", "country_clean.y")) |> 
  rename(COUNTRY = "COUNTRY.x") |> 
  select(iso3c, everything()) -> clean_flows_regimes
```

### Analyze data

#####  Table of Summary Statistics by Regime Type

```{r}
clean_flows_regimes |> 
  group_by(regime_simple) |> 
  summarise(
    mean_net_flows = mean(net_flows_pgdp),
    sd_net_flows = sd(net_flows_pgdp),
    mean_ndi = mean(ndi_pgdp),
    sd_ndi = sd(ndi_pgdp),
    mean_npi = mean(npi_pgdp),
    sd_npi= sd(npi_pgdp),
    mean_noi = mean(noi_pgdp),
    sd_noi = sd(noi_pgdp)
  )
```

### Metadata table

```{r}
clean_flows_regimes |> 
  filter(country_group == "Eurozone") |> 
  count(regime_simple)
```

```{r}
clean_flows_regimes |> 
  filter(country_group == "Baltics") |> 
  count(regime_simple)
```

```{r}
clean_flows_regimes |> 
  filter(country_group == "Iceland") |> 
  count(regime_simple)
```

```{r}
clean_flows_regimes %>% 
  filter(country_group != "Other", !is.na(regime_simple)) %>% 
  count(COUNTRY, country_group, regime_simple, name = "n") %>%    # include country_group here
  group_by(COUNTRY, country_group) %>% 
  mutate(pct = n / sum(n)) %>% 
  slice_max(n, n = 1, with_ties = TRUE) %>% 
  arrange(COUNTRY, desc(n)) %>% 
  rename(
    dominant_ex_rate_regime = regime_simple,
    percent_data_in_dominant_group = pct
  ) %>% 
  select(-n) %>% 
  arrange(desc(dominant_ex_rate_regime), country_group)
```

### Match CS4 Table Structure

```{r}
### ===== Tables with the same structure as CS4 (by regime) =====

ANNUALIZE <- 4

# 1) Attach annual GDP (USD) to the regime-joined data
gdp_cols <- gdp_data_USD %>%
  transmute(
    COUNTRY,
    YEAR = TIME_PERIOD,
    gdp_usd = `Gross domestic product (GDP), Current prices, US dollar`
  )

clean_flows_regimes <- clean_flows_regimes %>%
  left_join(gdp_cols, by = c("COUNTRY", "YEAR")) %>%
  mutate(
    # guard against nonpositive/NA GDP in weighting
    gdp_usd = ifelse(is.na(gdp_usd) | gdp_usd <= 0, NA_real_, gdp_usd)
  )

# Stable, safe column slugs in your desired order
regime_levels <- c(
  "Hard peg / narrow band / no separate tender",
  "Crawling peg/band (tight, ≤±2%)",
  "Crawling band (wider) / managed float",
  "Freely floating",
  "Freely falling",
  "Dual market (parallel data missing)"
)
regime_slugs <- c("hard_peg","crawl_tight","managed_float","free_float","freely_falling","dual_market")

# Ensure factor ordering for consistent column order
clean_flows_regimes <- clean_flows_regimes %>%
  mutate(regime_simple = factor(regime_simple, levels = regime_levels, ordered = TRUE))

# 2) Core builder: EXACTLY mirrors Script 1’s math for weighted means
make_regime_table <- function(df, metric, case_country = "Iceland", annualize = 4) {
  metric <- rlang::ensym(metric)

  # Reconstruct USD flows so we can do sum(flows)/sum(GDP) * annualize * 100
  # (%GDP was computed as: flow_usd * annualize / gdp_usd * 100)
  df2 <- df %>%
    mutate(
      flow_usd = (!!metric / 100) * gdp_usd / annualize
    )

  # Iceland series (single column)
  iceland_series <- df2 %>%
    filter(COUNTRY == case_country) %>%
    select(YEAR, QUARTER, iceland_pgdp = !!metric)

  # Per-regime: weighted (from USD sums) and simple (mean of %GDP)
  per_regime <- df2 %>%
    group_by(YEAR, QUARTER, regime_simple) %>%
    summarise(
      # Weighted via USD sums (identical to Script 1)
      pgdp_weighted = {
        flow_sum <- sum(flow_usd, na.rm = TRUE)
        gdp_sum  <- sum(gdp_usd,  na.rm = TRUE)
        if (is.finite(gdp_sum) && gdp_sum > 0) (flow_sum * annualize / gdp_sum) * 100 else NA_real_
      },
      # Simple average: mean of %GDP across countries
      pgdp_simple   = mean(!!metric, na.rm = TRUE),
      .groups = "drop"
    )

  # Map regimes to slugs for final column names
  reg_map <- tibble(
    regime_simple = factor(regime_levels, levels = regime_levels, ordered = TRUE),
    slug = regime_slugs
  )
  per_regime <- per_regime %>% left_join(reg_map, by = "regime_simple")

  # Wide frames: weighted and simple
  wide_w <- per_regime %>%
    select(YEAR, QUARTER, slug, pgdp_weighted) %>%
    tidyr::pivot_wider(
      names_from = slug, values_from = pgdp_weighted,
      names_glue = "{slug}_pgdp_weighted"
    )

  wide_s <- per_regime %>%
    select(YEAR, QUARTER, slug, pgdp_simple) %>%
    tidyr::pivot_wider(
      names_from = slug, values_from = pgdp_simple,
      names_glue = "{slug}_pgdp_simple"
    )

  # Join and order columns to match your reference pattern
  out <- full_join(iceland_series, wide_w, by = c("YEAR","QUARTER")) %>%
    full_join(wide_s, by = c("YEAR","QUARTER")) %>%
    mutate(UNIT = "Percentage of Nominal GDP (%)") %>%
    relocate(UNIT, .after = QUARTER)

  pairwise_cols <- as.vector(rbind(
    paste0(regime_slugs, "_pgdp_weighted"),
    paste0(regime_slugs, "_pgdp_simple")
  ))
  pairwise_cols <- pairwise_cols[pairwise_cols %in% names(out)]

  out %>%
    select(YEAR, QUARTER, UNIT, iceland_pgdp, all_of(pairwise_cols)) %>%
    arrange(YEAR, QUARTER)
}

# 3) Build one table per indicator (use existing %GDP metrics)
net_flows_pgdp_by_regime <- make_regime_table(clean_flows_regimes, net_flows_pgdp)
ndi_pgdp_by_regime       <- make_regime_table(clean_flows_regimes, ndi_pgdp)
npi_pgdp_by_regime       <- make_regime_table(clean_flows_regimes, npi_pgdp)
noi_pgdp_by_regime       <- make_regime_table(clean_flows_regimes, noi_pgdp)

# (Optional) Exclude crisis periods to mirror reference
crisis_years <- c(2008, 2009, 2010, 2020, 2021, 2022)
net_flows_pgdp_by_regime_no_crises <- net_flows_pgdp_by_regime %>% filter(!YEAR %in% crisis_years)
ndi_pgdp_by_regime_no_crises       <- ndi_pgdp_by_regime       %>% filter(!YEAR %in% crisis_years)
npi_pgdp_by_regime_no_crises       <- npi_pgdp_by_regime       %>% filter(!YEAR %in% crisis_years)
noi_pgdp_by_regime_no_crises       <- noi_pgdp_by_regime       %>% filter(!YEAR %in% crisis_years)

# Preview
net_flows_pgdp_by_regime %>% head()
ndi_pgdp_by_regime %>% head()
npi_pgdp_by_regime %>% head()
noi_pgdp_by_regime %>% head()
```

```{r}

# Write to disk using a parallel folder to your CS4 outputs
write_csv(net_flows_pgdp_by_regime,             "Clean/CS5_Regime_Analysis/net_capital_flows_full.csv")
write_csv(net_flows_pgdp_by_regime_no_crises,   "Clean/CS5_Regime_Analysis/net_capital_flows_no_crises.csv")

write_csv(ndi_pgdp_by_regime,                   "Clean/CS5_Regime_Analysis/net_direct_investment_full.csv")
write_csv(ndi_pgdp_by_regime_no_crises,         "Clean/CS5_Regime_Analysis/net_direct_investment_no_crises.csv")

write_csv(npi_pgdp_by_regime,                   "Clean/CS5_Regime_Analysis/net_portfolio_investment_full.csv")
write_csv(npi_pgdp_by_regime_no_crises,       "Clean/CS5_Regime_Analysis/net_portfolio_investment_no_crises.csv")

write_csv(noi_pgdp_by_regime,                   "Clean/CS5_Regime_Analysis/net_other_investment_full.csv")
write_csv(noi_pgdp_by_regime_no_crises,         "Clean/CS5_Regime_Analysis/net_other_investment_no_crises.csv")

```

















