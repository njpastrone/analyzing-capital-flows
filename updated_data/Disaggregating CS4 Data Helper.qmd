---
title: "Disaggregating CS4 Data Helper"
format: html
editor: visual
---

# Case Study 3/4: Other Comparators

```{r, message=F}
library(tidyverse)
library(readr)
library(stringr)
options(scipen = 999)
```

### Cleaning Raw BOP Data

```{r}
case_three_raw <- read_csv("Raw/case_study_4_data_july_28_2025.csv")
```

```{r}
head(case_three_raw)
```

```{r}
case_three_raw |> summary()
```

### Check if Timeseries per row data, then do extra step:

```{r}
library(tidyverse)
library(rlang)
library(glue)

pivot_if_timeseries <- function(data) {
  # Capture the name of the input dataset as a string
  data_name <- deparse(substitute(data))
  
  # Detect year-pattern columns (e.g., "1999", "2000-Q1", "X1999")
  year_pattern <- "^\\d{4}"
  year_cols <- names(data)[str_detect(names(data), year_pattern)]
  
  # Check number of year columns and pivot if necessary
  if (length(year_cols) > 3) {
    message(glue::glue("'{data_name}' is in time-series-per-row format. Pivoting longer..."))
    
    data_long <- data |> 
      pivot_longer(
        cols = all_of(year_cols),
        names_to = "TIME_PERIOD",
        values_to = "OBS_VALUE"
      )
    
    message(glue::glue("'Data pivoted."))
    
    # IMF BOP data fetched in long format must be rescaled from Millions into raw units ( * 1000000)
    message(glue::glue("'Rescaling..."))
    data_long <- data_long |> 
      mutate(OBS_VALUE = OBS_VALUE*1000000) |> 
      select(-c(DATASET, SERIES_CODE, OBS_MEASURE))
    
    message(glue::glue("'Data rescaled."))  
    
  } else {
    message(glue::glue("'{data_name}' is NOT in time-series-per-row format. No pivot applied."))
    data_long <- data
  }
  
  return(data_long)
}

```

```{r}
case_three_reshaped_rescaled <- pivot_if_timeseries(case_three_raw) 
```

```{r}
case_three_reshaped_rescaled |> head()
```

### Basic Cleaning

```{r}
case_three_reshaped_rescaled |> 
  mutate(
    ENTRY_FIRST_WORD = str_extract(BOP_ACCOUNTING_ENTRY, "^[^,]+"),
    FULL_INDICATOR = paste(ENTRY_FIRST_WORD, INDICATOR, sep = " - ")
  ) |> 
  select(-c(BOP_ACCOUNTING_ENTRY, INDICATOR, ENTRY_FIRST_WORD, FREQUENCY)) |> 
  select(COUNTRY, TIME_PERIOD, FULL_INDICATOR, everything()) -> case_three_new_cols
```

```{r}
case_three_new_cols |> 
  head()
```

```{r}
case_three_new_cols |> 
  separate(TIME_PERIOD, into = c("YEAR", "QUARTER"), sep = "-") |> 
  mutate(QUARTER = parse_number(QUARTER)) -> case_three_final_cols
```

```{r}
case_three_final_cols |> 
  head()
```


### Pivoting

```{r}
case_three_final_cols |> 
  select(-SCALE) |> 
  mutate(YEAR = as.double(YEAR)) |> 
  pivot_wider(names_from = FULL_INDICATOR, values_from = OBS_VALUE) -> case_three_pivoted
```

```{r}
case_three_pivoted |> head()
```

```{r}
colnames(case_three_pivoted)
```

### Summary of Case Study 3/4 Data

```{r}
case_three_pivoted |> summary()
```

#### QA Checks

```{r}
case_three_pivoted |> 
  select()
```




```{r}
case_three_pivoted |> 
  select(`Assets - Portfolio investment, Debt securities`, `Assets - Portfolio investment, Equity and investment fund shares`, `Assets - Portfolio investment, Total financial assets/liabilities`) |> 
  mutate(total_assets = `Assets - Portfolio investment, Debt securities` + `Assets - Portfolio investment, Equity and investment fund shares`) |> 
  select(!c(`Assets - Portfolio investment, Debt securities`, `Assets - Portfolio investment, Equity and investment fund shares`))
```

```{r}
colnames(case_three_pivoted)
```

```{r}
# Function to test if debt + equity matches total portfolio flows
check_portfolio_sums <- function(df,
                                 total_col,
                                 debt_col,
                                 equity_col,
                                 tolerance = 1e-6) {
  
  df |> 
    mutate(
      calculated_total = .data[[debt_col]] + .data[[equity_col]],
      difference = .data[[total_col]] - calculated_total,
      match = abs(difference) <= tolerance
    )
}

# Example usage:
# For assets
assets_check <- check_portfolio_sums(
  df = case_three_pivoted,
  total_col = "Assets - Portfolio investment, Total financial assets/liabilities",
  debt_col = "Assets - Portfolio investment, Debt securities",
  equity_col = "Assets - Portfolio investment, Equity and investment fund shares"
)

# For liabilities
liabilities_check <- check_portfolio_sums(
  df = case_three_pivoted,
  total_col = "Liabilities - Portfolio investment, Total financial assets/liabilities",
  debt_col = "Liabilities - Portfolio investment, Debt securities",
  equity_col = "Liabilities - Portfolio investment, Equity and investment fund shares"
)

# View rows where the sums don't match
assets_check |> filter(!match)
liabilities_check |> filter(!match)

```

```{r}
check_portfolio_sums <- function(df, total_col, debt_col, equity_col, tolerance = 1e-6) {
  
  results <- df |> 
    mutate(
      calculated_total = .data[[debt_col]] + .data[[equity_col]],
      difference = .data[[total_col]] - calculated_total,
      status = ifelse(abs(difference) <= tolerance, "OK", "Mismatch")
    ) |> 
    select(all_of(c(total_col, debt_col, equity_col, "calculated_total", "difference", "status")))
  
  # Summary
  summary_table <- results |> 
    count(status) |> 
    mutate(percentage = round(100 * n / sum(n), 2))
  
  list(
    detailed_results = results,
    summary = summary_table
  )
}

# Example usage for Assets
assets_check <- check_portfolio_sums(
  df = case_three_pivoted,
  total_col = "Assets - Portfolio investment, Total financial assets/liabilities",
  debt_col = "Assets - Portfolio investment, Debt securities",
  equity_col = "Assets - Portfolio investment, Equity and investment fund shares"
)

# See the summary
assets_check$summary

# See only mismatches
assets_check$detailed_results |> filter(status == "Mismatch")

```

```{r}
check_portfolio_sums <- function(df, total_col, debt_col, equity_col, tolerance_value = 5e5) {
  
  results <- df |> 
    mutate(
      calculated_total = .data[[debt_col]] + .data[[equity_col]],
      difference = .data[[total_col]] - calculated_total,
      status = ifelse(abs(difference) <= tolerance_value, "OK", "Mismatch")
    ) |> 
    select(all_of(c(total_col, debt_col, equity_col, "calculated_total", "difference", "status")))
  
  # Summary counts
  summary_table <- results |> 
    count(status) |> 
    mutate(percentage = round(100 * n / sum(n), 2))
  
  list(
    detailed_results = results,
    summary = summary_table
  )
}

# Example: Allow differences up to ±5,000,000 USD
assets_check <- check_portfolio_sums(
  df = case_three_pivoted,
  total_col = "Assets - Portfolio investment, Total financial assets/liabilities",
  debt_col = "Assets - Portfolio investment, Debt securities",
  equity_col = "Assets - Portfolio investment, Equity and investment fund shares",
  tolerance_value = 5e6
)

# View summary
assets_check$summary

# View only rows that exceed tolerance
assets_check$detailed_results |> filter(status == "Mismatch")

```

```{r}
calculate_and_check_net_portfolio <- function(df,
                                              assets_debt_col,
                                              liabilities_debt_col,
                                              assets_equity_col,
                                              liabilities_equity_col,
                                              reported_net_total_col,
                                              tolerance_value = 5e5) {
  
  results <- df |>
    mutate(
      net_portfolio_debt   = .data[[assets_debt_col]] - .data[[liabilities_debt_col]],
      net_portfolio_equity = .data[[assets_equity_col]] - .data[[liabilities_equity_col]],
      calculated_net_total = net_portfolio_debt + net_portfolio_equity,
      net_difference       = .data[[reported_net_total_col]] - calculated_net_total,
      status = case_when(
        is.na(.data[[reported_net_total_col]]) |
        is.na(net_portfolio_debt) |
        is.na(net_portfolio_equity) ~ "Missing data",
        abs(net_difference) <= tolerance_value ~ "OK",
        TRUE ~ "Mismatch"
      )
    ) |>
    select(
      all_of(c(
        assets_debt_col, liabilities_debt_col,
        assets_equity_col, liabilities_equity_col,
        reported_net_total_col,
        "net_portfolio_debt", "net_portfolio_equity",
        "calculated_net_total", "net_difference", "status"
      ))
    )
  
  # Summary counts
  summary_table <- results |>
    count(status) |>
    mutate(percentage = round(100 * n / sum(n), 2))
  
  list(
    detailed_results = results,
    summary = summary_table
  )
}

# Example usage:
net_portfolio_check <- calculate_and_check_net_portfolio(
  df = case_three_pivoted,
  assets_debt_col = "Assets - Portfolio investment, Debt securities",
  liabilities_debt_col = "Liabilities - Portfolio investment, Debt securities",
  assets_equity_col = "Assets - Portfolio investment, Equity and investment fund shares",
  liabilities_equity_col = "Liabilities - Portfolio investment, Equity and investment fund shares",
  reported_net_total_col = "Net (net acquisition of financial assets less net incurrence of liabilities) - Portfolio investment, Total financial assets/liabilities",
  tolerance_value = 5e5 # allow ±500,000 USD difference
)

# View the summary
net_portfolio_check$summary

# View only mismatches
net_portfolio_check$detailed_results |> filter(status == "Mismatch")

```



#### Accessing Metadata

```{r}
colnames(case_three_pivoted)
```

```{r}
unique(case_three_pivoted$COUNTRY)
```
